//////////////install gpu drivers for ubuntu 18.04 LTS////////////////////////////////////////

curl -O https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
sudo apt update
sudo apt install cuda
nvidia-smi

//////////////prepare and run benchmarks for BERT///////////////////////////////////////////
#prepare VM for the benchmark code
cd ~
mkdir tmp
cd tmp
wget https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh
bash Anaconda3-5_____something
export PATH=~/anaconda3/bin:$PATH
conda --version
conda install -c pytorch pytorch
conda install -c conda-forge transformers
git clone https://github.com/huggingface/transformers
cd transformers
pip install .

#actual benchmark code

from transformers import PyTorchBenchmark, PyTorchBenchmarkArguments
args = PyTorchBenchmarkArguments(models=["bert-base-uncased"], batch_sizes=[1], sequence_lengths=[8, 32, 128, 512])
#args = PyTorchBenchmarkArguments(models=["bert-base-uncased"], batch_sizes=[8], sequence_lengths=[8, 32, 128, 512],no_cuda=True)
benchmark = PyTorchBenchmark(args)
results = benchmark.run()
print(results)


//////////////Install pip3 in VM/////////////////////////////////////////////////////////////////
#install pip3
sudo apt update
sudo apt install python3-pip
pip3 --version

//////////////how to use screen in linux VM/////////////////////////////////////////////////////
type screen
wait untile the virtual screen boots
execute the thread
type ctrl+a then ctrl+d ==== this will ditach the virtual screen
you can now close your ssh
to monitor your results type screen -r to resume the virtual display

////////////configure TPU with VM instance////////////////////////////////////////////////////
first create a compute engine VM

install ctpu tool in the VM machine:
wget https://dl.google.com/cloud_tpu/ctpu/latest/linux/ctpu && chmod a+x ctpu

authenticate operations of adding and deleting TPUs in the VM:
gcloud auth application-default login
and follow the instructions

add ctpu to your path:
sudo cp ctpu /usr/bin/

create a TPU instance, the instance should have the same name as the VM machine (change the project and zone for the next command) (--tpu-only is used because we already have the cpu in the VM, --noconf so that the VM does not ask you for further permissions):
ctpu up --name=tpu-test --project=deep-learning-projects-283921 --zone=europe-west4-a --tpu-size=v3-8  --tpu-only   --tf-version=1.15.dev20190821 --noconf

see if the tpu is running or not:
ctpu status

delete the tpu and VM instance:
ctpu delete

restart the tpu and cpu:
ctpu restart

for more options use:
ctpu